# Generated by Django 2.2.4 on 2020-01-11 08:00

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import myapp.core.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('skin_type', models.CharField(choices=[('dry', 'Dry'), ('oily', 'Oily'), ('sensitive', 'Sensitive')], max_length=10)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('superuser', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('email_secret', models.CharField(blank=True, default='', max_length=120)),
                ('login_method', models.CharField(choices=[('email', 'Email'), ('google', 'Google'), ('facebook', 'Facebook'), ('naver', 'Naver')], default='email', max_length=50)),
                ('point', models.IntegerField(default=0)),
                ('favs_ingredients', models.ManyToManyField(related_name='users', to='products.Ingredient')),
                ('favs_products', models.ManyToManyField(related_name='users', to='products.Product')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', myapp.core.managers.CustomBaseUserManager()),
            ],
        ),
    ]
